// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	laundromats "laundro-api-ca/business/laundromats"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id uint) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAddress provides a mock function with given fields: addressID
func (_m *Repository) GetByAddress(addressID []uint) ([]laundromats.Domain, error) {
	ret := _m.Called(addressID)

	var r0 []laundromats.Domain
	if rf, ok := ret.Get(0).(func([]uint) []laundromats.Domain); ok {
		r0 = rf(addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]laundromats.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id uint) (laundromats.Domain, error) {
	ret := _m.Called(id)

	var r0 laundromats.Domain
	if rf, ok := ret.Get(0).(func(uint) laundromats.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(laundromats.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *Repository) GetByName(name string) ([]laundromats.Domain, error) {
	ret := _m.Called(name)

	var r0 []laundromats.Domain
	if rf, ok := ret.Get(0).(func(string) []laundromats.Domain); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]laundromats.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatusByID provides a mock function with given fields: id
func (_m *Repository) GetStatusByID(id uint) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Insert provides a mock function with given fields: laundroData
func (_m *Repository) Insert(laundroData *laundromats.Domain) (laundromats.Domain, error) {
	ret := _m.Called(laundroData)

	var r0 laundromats.Domain
	if rf, ok := ret.Get(0).(func(*laundromats.Domain) laundromats.Domain); ok {
		r0 = rf(laundroData)
	} else {
		r0 = ret.Get(0).(laundromats.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*laundromats.Domain) error); ok {
		r1 = rf(laundroData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, laundroData
func (_m *Repository) Update(id uint, laundroData *laundromats.Domain) (laundromats.Domain, error) {
	ret := _m.Called(id, laundroData)

	var r0 laundromats.Domain
	if rf, ok := ret.Get(0).(func(uint, *laundromats.Domain) laundromats.Domain); ok {
		r0 = rf(id, laundroData)
	} else {
		r0 = ret.Get(0).(laundromats.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *laundromats.Domain) error); ok {
		r1 = rf(id, laundroData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
