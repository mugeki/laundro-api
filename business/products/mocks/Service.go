// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	laundromats "laundro-api-ca/business/laundromats"

	mock "github.com/stretchr/testify/mock"

	products "laundro-api-ca/business/products"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id uint) (string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByLaundromat provides a mock function with given fields: laundroID
func (_m *Service) GetAllByLaundromat(laundroID uint) ([]products.Domain, error) {
	ret := _m.Called(laundroID)

	var r0 []products.Domain
	if rf, ok := ret.Get(0).(func(uint) []products.Domain); ok {
		r0 = rf(laundroID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(laundroID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaundromatByCategory provides a mock function with given fields: categoryId
func (_m *Service) GetLaundromatByCategory(categoryId int) ([]laundromats.Domain, error) {
	ret := _m.Called(categoryId)

	var r0 []laundromats.Domain
	if rf, ok := ret.Get(0).(func(int) []laundromats.Domain); ok {
		r0 = rf(categoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]laundromats.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaundromatID provides a mock function with given fields: id
func (_m *Service) GetLaundromatID(id uint) uint {
	ret := _m.Called(id)

	var r0 uint
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Insert provides a mock function with given fields: laundroID, productData
func (_m *Service) Insert(laundroID uint, productData *products.Domain) (products.Domain, error) {
	ret := _m.Called(laundroID, productData)

	var r0 products.Domain
	if rf, ok := ret.Get(0).(func(uint, *products.Domain) products.Domain); ok {
		r0 = rf(laundroID, productData)
	} else {
		r0 = ret.Get(0).(products.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *products.Domain) error); ok {
		r1 = rf(laundroID, productData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, productData
func (_m *Service) Update(id uint, productData *products.Domain) (products.Domain, error) {
	ret := _m.Called(id, productData)

	var r0 products.Domain
	if rf, ok := ret.Get(0).(func(uint, *products.Domain) products.Domain); ok {
		r0 = rf(id, productData)
	} else {
		r0 = ret.Get(0).(products.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *products.Domain) error); ok {
		r1 = rf(id, productData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
